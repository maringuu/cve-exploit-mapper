import argparse
from argparse import ArgumentParser

import scraper
import sys
import scraper.metasploit
import scraper.exploit_db
import scraper.trickest
import pandas as pd
from pandas import DataFrame
import os


parser = ArgumentParser()
parser.add_argument(
    "--outfile",
    default="cve_exploit_mapping.csv",
    help="Path to the output csv file",
)
parser.add_argument(
    "--scrapers",
    default="trickest,metasploit,exploitdb",
    help="""Comma separated list of scrapers to be used
    Avaiable scrapers: trickest, metasploit, exploitdb
    """
)

args = parser.parse_args()

scrapers = args.scrapers.split(",")
assert set(scrapers).issubset({"metasploit", "trickest", "exploitdb"})

outfile = open(args.outfile, "w+") if args.outfile != "-" else sys.stdout

df = DataFrame(columns=["cve", "exploit-link", "source"])
base_path = os.getenv("XDG_CACHE_HOME", f"{os.getenv('HOME')}/.cache") + "/cve_exploit_mapper/"

metasploit_df = None
if "metasploit" in scrapers:
    metasploit_path = base_path + "/metasploit"
    scraper.metasploit.download_to_path(metasploit_path)
    metasploit_df = scraper.metasploit.dataframe_from_directory(metasploit_path)

trickest_df = None
if "trickest" in scrapers:
    trickest_path = base_path + "/trickest"
    scraper.trickest.download_to_path(trickest_path)
    trickest_df = scraper.trickest.dataframe_from_directory(trickest_path)

exploitdb_df = None
if "exploitdb" in scrapers:
    exploitdb_path = base_path + "/exploitdb"
    scraper.exploit_db.download_to_path(exploitdb_path)
    exploitdb_df = scraper.exploit_db.fetch_dataframe(exploitdb_path)

df = pd.concat([df, metasploit_df, trickest_df, exploitdb_df])
df.to_csv(outfile, index=False)
