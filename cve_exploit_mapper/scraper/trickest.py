"""This module scrapes data from https://github.com/trickest/cve"""

import subprocess as sp
import pandas as pd
from io import StringIO
from pathlib import Path
import logging


def download_to_path(_path):
    path = Path(_path)

    if path.exists():
        logging.info("Trickest directory exists. Running git pull.")
        sp.run(
            f"GIT_DIR={path}/.git git pull",
            shell=True,
            stdout=sp.DEVNULL,
            stderr=sp.DEVNULL,
            check=True,
        )
    else:
        logging.info("Cloning trickest")
        sp.run(
            f"git clone https://github.com/trickest/cve {path}",
            shell=True,
            stdout=sp.DEVNULL,
            stderr=sp.DEVNULL,
            check=True,
        )


def dataframe_from_directory(path):
    fd_process = sp.run(
        # Iterate over all files, get all github links and separate CVE id and link by a pipe
        # We can't use commas as separators as some links contain commas (likely a parsing error by trickest)
        f"cd {path} && " + r"""fdfind -e md "CVE-\d+-\d+" -x rg --with-filename --only-matching -- '- https://github.com/.*' '{}' | sed 's/:- /|/'""",
        shell=True,
        stdout=sp.PIPE,
        stderr=sp.DEVNULL,
        text=True,
        check=True,
    )

    df = pd.read_csv(
        StringIO(fd_process.stdout),
        index_col=False,
        sep="|",
        names=["repo_cve", "exploit-link"]
    )

    # Remove date prefix and markdown postfix
    df["cve"] = df["repo_cve"].str.slice(start=5, stop=-3)

    # TODO figure out the actual commit
    df["source"] = "https://github.com/trickest/cve/tree/main/" + df["repo_cve"]

    return df[["cve", "exploit-link", "source"]]
